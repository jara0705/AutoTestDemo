apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.jara.autotestdemo"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    repositories {
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }

    jacoco{
        version "0.7.4.201502262128"
    }

}

task findbugs(type: FindBugs, dependsOn: "test"){
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    classes = files("${project.rootDir}/app/build/intermediates/classes")
    source = fileTree('src/main/java')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task jacocoTestReport(type:JacocoReport,dependsOn:"testDebugUnitTest"){
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    classDirectories = fileTree(
            dir : "$buildDir/intermediates/classes/debug",
            excludes : [
                    '**/*Test.class',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*'
            ]
    )
    def coverageSourceDirs = ['src/main/java']
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    additionalClassDirs = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
    reports{
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation 'org.robolectric:robolectric:3.3.2'
    testImplementation 'org.robolectric:robolectric-annotations:3.3.2'
    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation files('libs/adapter-rxjava2-2.3.0.jar')
    implementation files('libs/converter-gson-2.3.0.jar')
    implementation files('libs/okhttp-3.8.1.jar')
    implementation files('libs/okio-1.13.0.jar')
    implementation files('libs/reactive-streams-1.0.0.final.jar')
    implementation files('libs/retrofit-2.3.0.jar')
    implementation files('libs/rxjava-2.1.1.jar')
    compile(name: 'rxandroid-2.0.1', ext: 'aar')
    implementation files('libs/logging-interceptor-3.8.1.jar')
}

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'


        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

